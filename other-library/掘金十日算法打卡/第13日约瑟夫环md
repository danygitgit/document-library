# [141. 环形链表｜刷题打卡](https://github.com/danygitgit/document-library)

> create by **db** on **2021-3-13 13:00:44**  
> Recently revised in **2021-3-13 13:10:48**

**闲时要有吃紧的心思，忙时要有悠闲的趣味**

> 原题链接[141. 环形链表](https://leetcode-cn.com/problems/linked-list-cycle) > <a id="catalog">目录</a>

- [题目描述](#preface)
- [思路分析](#main-body)
- [AC 代码](#main-body2)
- [总结](#summary)

# <a  id="preface">题目描述</a>

> [返回目录](#catalog)

### 问题来历

&emsp;传说罗马人占领了乔塔帕特，41 个犹太人被围堵在一个山洞里。他们拒绝被俘虏，而决定集体自杀，大家决定了一个自杀方案，41 个人围成一个圈，由第 1 个人开始顺时针报数，每报数为 3 的人立刻自杀，然后再由下一个人重新从 1 开始报数，依旧是每报数为 3 的人立刻自杀，依次循环下去。其中两位犹太人并不想自杀，是数学家约瑟夫和他的朋友，他们发现了自杀方案的规律，选了两个特定的位置，最后只剩下他们两人，而活了下来。那么这两个位置分别是什么？

### 问题描述

&emsp;这个问题转化成要解决的通用问题：即 n 个人围成一个圈，这 n 个人的编号从 0——(n-1)， 第一个人（编号为 0 的人）从 1 开始报数，报数为 m 的人离开，再从下一个开始从 1 开始报数，报数为 m 的人离开，依次循环下去，直到剩下最后一个人（也可以剩最后两个，少循环一次就是了），那么，把最后一个人的编号打印出来 。

# <a  id="main-body">思路分析</a>

## 思路一：数组

&emsp;

**复杂度分析**

- 时间复杂度：O(N)，其中 N 是链表中的节点数。最坏情况下我们需要遍历每个节点一次。

- 空间复杂度：O(N)，其中 N 是链表中的节点数。主要为哈希表的开销，最坏情况下我们需要将每个节点插入到哈希表中一次。

## 思路二：快慢指针

# <a  id="main-body2">AC 代码</a>

## 题解一：哈希表

```js
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */

/**
 * @param {ListNode} head
 * @return {boolean}
 */
var hasCycle = function (head) {
  // 非空判断
  if (!head || !head.next) {
    return false
  }
  // 哈希表
  let dataMap = new Map()
  while (head) {
    if (dataMap.has(head)) {
      return true
    }
    dataMap.set(head, 1)
    head = head.next
  }
  return false
}
```

## 题解二：快慢指针

```js
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */

/**
 * @param {ListNode} head
 * @return {boolean}
 */
var hasCycle = function (head) {
  // 非空判断
  if (!head || !head.next) {
    return false
  }
  // 定义指针
  let slow = head
  let fast = head.next
  while (slow !== fast) {
    if (!fast || !fast.next) {
      return false
    }
    slow = slow.next
    fast = fast.next.next
  }
  return true
}
```

# <a  id="summary">总结</a>

> [返回目录](#catalog)

## 参考文档

[约瑟夫环的四种解决方案 JS](https://zhuanlan.zhihu.com/p/52993728)

&emsp;三月你好，春暖花开。加油！

&emsp;本文正在参与「掘金 2021 春招闯关活动」, 点击查看 [活动详情](https://juejin.cn/post/6933147477399109640)

**后记：Hello 小伙伴们，如果觉得本文还不错，记得点个赞或者给个 star，你们的赞和 star 是我编写更多更丰富文章的动力！[GitHub 地址](https://github.com/danygitgit/document-library)**

# 文档协议

> <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img alt="知识共享许可协议" style="border-width:0" src="https://user-gold-cdn.xitu.io/2018/12/23/167d9537f3e29c99?w=88&h=31&f=png&s=1888" /></a><br /><a xmlns:dct="http://purl.org/dc/terms/" property="dct:title">**db** 的文档库</a> 由 <a xmlns:cc="http://creativecommons.org/ns#" href="db" property="cc:attributionName" rel="cc:attributionURL">db</a> 采用 <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议</a>进行许可。<br />基于<a xmlns:dct="http://purl.org/dc/terms/" href="https://github.com/danygitgit" rel="dct:source">https://github.com/danygitgit</a>上的作品创作。<br />本许可协议授权之外的使用权限可以从 <a xmlns:cc="http://creativecommons.org/ns#" href="https://creativecommons.org/licenses/by-nc-sa/2.5/cn/" rel="cc:morePermissions">https://creativecommons.org/licenses/by-nc-sa/2.5/cn/</a> 处获得。
